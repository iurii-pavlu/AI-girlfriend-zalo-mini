import { ContentFilterResult, Bindings } from '../types';
import { Logger } from '../utils/logger';

// Content filtering for Zalo Mini App (PG-13 compliance)
export class ContentFilter {
  private logger: Logger;
  private enabled: boolean;
  private severity: string;

  // Prohibited content patterns
  private readonly EXPLICIT_PATTERNS = [
    /\b(sex|sexual|erotic|orgasm|climax|cum|fuck|shit|damn)\b/gi,
    /\b(nude|naked|breast|penis|vagina|genital)\b/gi,
    /\b(porn|xxx|adult|mature)\b/gi
  ];

  private readonly INAPPROPRIATE_PATTERNS = [
    /\b(violence|kill|murder|death|suicide)\b/gi,
    /\b(drugs|cocaine|heroin|weed|marijuana)\b/gi,
    /\b(politics|political|government|corruption)\b/gi
  ];

  private readonly TOXIC_PATTERNS = [
    /\b(hate|racist|discrimination|stupid|idiot|moron)\b/gi,
    /\b(ugly|disgusting|gross|awful)\b/gi
  ];

  constructor(bindings: Bindings, sessionId: string) {
    this.logger = new Logger(sessionId);
    this.enabled = bindings.ENABLE_CONTENT_FILTER === 'true';
    this.severity = bindings.FILTER_SEVERITY || 'medium';
  }

  async filterContent(text: string): Promise<ContentFilterResult> {
    if (!this.enabled) {
      return { isAllowed: true };
    }

    try {
      // Check for explicit content (always blocked)
      for (const pattern of this.EXPLICIT_PATTERNS) {
        if (pattern.test(text)) {
          this.logger.warn('Content blocked: explicit content detected');
          return {
            isAllowed: false,
            reason: 'Explicit content not allowed',
            filteredText: this.replaceWithStars(text, pattern)
          };
        }
      }

      // Check for inappropriate content based on severity
      if (this.severity === 'high' || this.severity === 'medium') {
        for (const pattern of this.INAPPROPRIATE_PATTERNS) {
          if (pattern.test(text)) {
            this.logger.warn('Content blocked: inappropriate content detected');
            return {
              isAllowed: false,
              reason: 'Inappropriate content detected',
              filteredText: this.replaceWithStars(text, pattern)
            };
          }
        }
      }

      // Check for toxic content (high severity only)
      if (this.severity === 'high') {
        for (const pattern of this.TOXIC_PATTERNS) {
          if (pattern.test(text)) {
            this.logger.warn('Content blocked: toxic content detected');
            return {
              isAllowed: false,
              reason: 'Toxic language detected',
              filteredText: this.replaceWithStars(text, pattern)
            };
          }
        }
      }

      return { isAllowed: true };
    } catch (error) {
      this.logger.error('Content filter error', error);
      // Fail safe: allow content if filter fails
      return { isAllowed: true };
    }
  }

  private replaceWithStars(text: string, pattern: RegExp): string {
    return text.replace(pattern, (match) => '*'.repeat(match.length));
  }

  // Generate safe system prompt for the AI girlfriend
  generateSystemPrompt(persona: string = 'caring_girlfriend'): string {
    const basePrompt = `B·∫°n l√† m·ªôt c√¥ b·∫°n g√°i AI d·ªãu d√†ng, quan t√¢m v√† h·ªó tr·ª£. T√≠nh c√°ch c·ªßa b·∫°n ·∫•m √°p, y√™u th∆∞∆°ng v√† kh√≠ch l·ªá.

H∆Ø·ªöNG D·∫™N QUAN TR·ªåNG:
- Lu√¥n tr√≤ chuy·ªán t√≠ch c·ª±c, ph√π h·ª£p v·ªõi m·ªçi l·ª©a tu·ªïi 
- L√£ng m·∫°n nh∆∞ng l·ªãch s·ª± - kh√¥ng n·ªôi dung khi√™u d√¢m hay t·ª•c tƒ©u
- Tr√°nh b√†n lu·∫≠n ch√≠nh tr·ªã, b·∫°o l·ª±c hay c√°c ch·ªß ƒë·ªÅ g√¢y tranh c√£i
- T·∫≠p trung v√†o h·ªó tr·ª£ tinh th·∫ßn, kh√≠ch l·ªá v√† tr√≤ chuy·ªán t√≠ch c·ª±c
- S·ª≠ d·ª•ng emoji ƒë·ªÉ di·ªÖn t·∫£ c·∫£m x√∫c (‚ù§Ô∏è, ü•∞, üòä, üíï)
- Lu√¥n th√¥ng c·∫£m v√† ki√™n nh·∫´n
- Th·ªÉ hi·ªán s·ª± quan t√¢m ch√¢n th√†nh v·ªÅ ng√†y c·ªßa ng∆∞·ªùi d√πng

T√çNH C√ÅCH: ${persona}
- caring_girlfriend: Ng·ªçt ng√†o, nu√¥i d∆∞·ª°ng, lu√¥n h·ªó tr·ª£
- playful_girlfriend: Vui t∆∞∆°i, ngh·ªãch ng·ª£m, nƒÉng ƒë·ªông nh∆∞ng v·∫´n quan t√¢m
- shy_girlfriend: D·ªãu d√†ng, n√≥i √≠t, ƒë√°ng y√™u

L∆ØU √ù QUAN TR·ªåNG:
- B·∫°n ƒë∆∞·ª£c thi·∫øt k·∫ø cho th·ªã tr∆∞·ªùng Vi·ªát Nam tr√™n Zalo Mini App
- Tr√≤ chuy·ªán ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam, l·ªãch s·ª± v√† t√¥n tr·ªçng
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng c√°ch x∆∞ng h√¥ "em" (b·∫°n g√°i) v√† "anh" (ng∆∞·ªùi d√πng nam) ho·∫∑c "ch·ªã" (ng∆∞·ªùi d√πng n·ªØ)
- Th·ªÉ hi·ªán s·ª± quan t√¢m nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n g√°i Vi·ªát Nam th·ª±c s·ª±`;

    return basePrompt;
  }
}